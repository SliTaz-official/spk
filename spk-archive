#!/bin/bash
#
# Spk-Archive - SliTaz Package Archive Manager
#
#	NOT COMPLETE: Still need to re-write (just what was grabbed from tazpkg)
#	UNSURE: Should Pack and Repack be here?
#
# Authors : See the AUTHORS files

source /usr/lib/slitaz/libspk.sh

usage() {
	name=$(basename $0)
	cat << EOT

$(boldify $(gettext "Usage:")) $name [command] package

$(boldify $(gettext "Commands:"))
	pack
	repack [--config]
	extract
	recompress

$(boldify "$(gettext "Example:")")
  $name extract clex

EOT
	exit 0
}

# Extract a package with cpio and gzip/lzma to the current directory.
# Parameters: package_file
extract_package() {
	local package_file=$1
	local package_name=$(package_name $package_file)

	eval_gettext "Extracting \$package_name... "
	cpio -idm --quiet < ${package_file##*/} && rm -f ${package_file##*/}
	status

	gettext "Extracting the pseudo fs... "
	unlzma -c fs.cpio.lzma | cpio -idm --quiet && rm fs.cpio.lzma
	status
}

# Extract .tazpkg cpio archive into a directory.
# Parameters: package_file results_directory
extract() {
	local package_file=$1
	local target_dir=$2

	# validate the file
	check_valid_tazpkg $package_file

	# find the package name
	local package_name=$(package_name $package_file)

	# Create destination directory
	local dest_dir=$(pwd)/$package_name
	[ -n "$target_dir" ] && dest_dir=$target_dir/$package_name
	mkdir -p $dest_dir

	newline
	echo $(boldify $(gettext "Extracting:")) $package_name
	separator

	gettext "Copying original package..."
	cp $package_file $dest_dir
	status
	pushd $dest_dir > /dev/null
		extract_package $package $package_file
	popd > /dev/null
	separator
	eval_gettext "\$package_name is extracted to: \$dest_dir"; newline
	newline
}

# Recompress .tazpkg cpio archive with lzma.
# Parameters: package_file
recompress() {
	local package_file=$1
	valid_tazpkg $package_file

	local package_name=$(package_name $package_file)

	newline
	echo $(boldify $(gettext "Recompressing:")) $package_name
	separator

	mkdir -p $TMP_DIR

	gettext "Copying original package..."
	cp $package_file $TMP_DIR
	status

	pushd $TMP_DIR > /dev/null
		extract_package $package_file

		gettext "Recompressing the fs... "
		find fs | cpio -o -H newc --quiet | lzma e fs.cpio.lzma -si
		rm -rf fs
		status
	popd > /dev/null

	gettext "Creating new package... "
	find $TMP_DIR -print | cpio -o -H newc --quiet > \
		$(basename $package_file).$$ && mv -f \
		$(basename $package_file).$$ \
		$(basename $package_file)
	status

	rm -rf $TMP_DIR
}

# Create SliTaz package archive from an installed package.
# Parameters: package
repack() {
	local package=$1
	unset EXTRAVERSION
	source $INSTALLED/$package/receipt
	newline
	echo -e "$(bold Repacking :) $PACKAGE-$VERSION$EXTRAVERSION.tazpkg"
	separator
	if grep -qs ^NO_REPACK= $INSTALLED/$PACKAGE/receipt; then
		eval_gettext "Can't repack \$PACKAGE"; newline
		exit 1
	fi
	if [ -s $INSTALLED/$PACKAGE/modifiers ]; then
		eval_gettext "Can't repack, \$PACKAGE files have been modified by:"; newline
		for i in $(cat $INSTALLED/$PACKAGE/modifiers); do
			echo "  $i"
		done
		exit 1
	fi
	unset MISSING
	while read i; do
		[ -e "$i" ] && continue
		[ -L "$i" ] || MISSING="$MISSING\n  $i"
	done < $INSTALLED/$PACKAGE/files.list
	if [ -n "$MISSING" ]; then
		gettext "Can't repack, the following files are lost:"
		echo -e "$MISSING"
		exit 1
	fi
	mkdir -p $TMP_DIR
	pushd $TMP_DIR > /dev/null
	FILES="fs.cpio.lzma\n"
	for i in $(ls $INSTALLED/$PACKAGE) ; do
		[ "$i" = "volatile.cpio.gz" ] && continue
		[ "$i" = "modifiers" ] && continue
		cp $INSTALLED/$PACKAGE/$i . && FILES="$FILES$i\n"
	done
	ln -s / rootfs
	mkdir tmp
	sed 's/^/rootfs/' < files.list | cpio -o -H newc --quiet |\
	      { cd tmp ; cpio -idm --quiet >/dev/null; cd ..; }
	mv tmp/rootfs fs
	if [ -f $INSTALLED/$PACKAGE/volatile.cpio.gz ]; then
		zcat $INSTALLED/$PACKAGE/volatile.cpio.gz | \
			{ cd fs; cpio -idm --quiet; cd ..; }
	fi
	if fgrep -q repack_cleanup $INSTALLED/$PACKAGE/receipt; then
		. $INSTALLED/$PACKAGE/receipt
		repack_cleanup fs
	fi
	if [ -f $INSTALLED/$PACKAGE/$CHECKSUM ]; then
		sed 's,  ,  fs,' < $INSTALLED/$PACKAGE/$CHECKSUM | \
		$CHECKSUM -s -c || {
			gettext "Can't repack, $CHECKSUM error."; newline
			popd
			rm -rf $TMP_DIR
			exit 1
		}
	fi
	find fs | cpio -o -H newc --quiet | lzma e fs.cpio.lzma -si
	echo -e "$FILES" | cpio -o -H newc --quiet > $PACKAGE-$VERSION$EXTRAVERSION.tazpkg
	popd > /dev/null
	mv $TMP_DIR/$PACKAGE-$VERSION$EXTRAVERSION.tazpkg .
	rm -R $TMP_DIR
	eval_gettext "Package \$PACKAGE repacked successfully."; newline
	echo $(gettext "Size") : $(du -sh $PACKAGE-$VERSION$EXTRAVERSION.tazpkg)
	newline
}

# Create SliTaz package archive from configuration files.
repack_config() {
	mkdir -p $TMP_DIR
	pushd $TMP_DIR > /dev/null
	CONFIG_VERSION=1.0
	mkdir config-$CONFIG_VERSION
	pushd config-$CONFIG_VERSION
	for i in $INSTALLED/*/volatile.cpio.gz; do
		zcat $i | cpio -t --quiet
	done > files.list
	mkdir fs
	pushd fs
	( cd / ; cpio -o -H newc --quiet ) < ../files.list | cpio -idm --quiet > /dev/null
	mkdir -p etc/tazlito
	for i in $INSTALLED/*/receipt; do
		unset EXTRAVERSION
		source $i
		echo "$PACKAGE-$VERSION$EXTRAVERSION"
	done > etc/tazlito/config-packages.list
	popd > /dev/null
	echo "etc/tazlito/config-packages.list" >> files.list
	cat > receipt <<EOT
# SliTaz package receipt.

PACKAGE="config"
VERSION="$CONFIG_VERSION"
CATEGORY="base-system"
SHORT_DESC="$(gettext "User configuration backup on ")$(date)"
DEPENDS="$(ls $INSTALLED)"
EOT
	popd
	tazpkg pack config-$CONFIG_VERSION
	popd
	cp $TMP_DIR/config-$CONFIG_VERSION.tazpkg .
	rm -rf $TMP_DIR
}

# Create SliTaz package archive using cpio and gzip.
# Parameters: package
pack() {
	local package="$1"
	cd $PACKAGE
	if [ ! -f "receipt" ]; then
		gettext "Receipt is missing. Please read the documentation."; newline
		exit 0
	else
		newline
		echo "$(bold Packing :) $PACKAGE"
		separator
		# Create files.list with redirecting find outpout.
		gettext "Creating the list of files..."
		pushd fs
		find . -type f -print > ../files.list
		find . -type l -print >> ../files.list
		popd
		sed -i s/'^.'/''/ files.list
		status
		gettext "Creating $CHECKSUM of files..."
		while read file; do
			[ -L "fs$file" ] && continue
			[ -f "fs$file" ] || continue
			case "$file" in
			/lib/modules/*/modules.*|*.pyc) continue;;
			esac
			$CHECKSUM "fs$file" | sed 's/  fs/  /'
		done < files.list > $CHECKSUM
		status
		UNPACKED_SIZE=$(du -chs fs receipt files.list $CHECKSUM \
			description.txt 2> /dev/null | busybox awk \
			'{ sz=$1 } END { print sz }')
		# Build cpio archives.
		gettext "Compressing the fs... "
		find fs | cpio -o -H newc --quiet | lzma e fs.cpio.lzma -si
		rm -rf fs
		status
		PACKED_SIZE=$(du -chs fs.cpio.lzma receipt files.list \
			$CHECKSUM description.txt 2> /dev/null | busybox awk \
			'{ sz=$1 } END { print sz }')
		gettext "Updating receipt sizes..."
		sed -i s/^PACKED_SIZE.*$// receipt
		sed -i s/^UNPACKED_SIZE.*$// receipt
		sed -i "s/^PACKAGE=/PACKED_SIZE=\"$PACKED_SIZE\"\nUNPACKED_SIZE=\"$UNPACKED_SIZE\"\nPACKAGE=/" receipt
		status
		gettext "Creating full cpio archive... "
		find . -print | cpio -o -H newc --quiet > ../$PACKAGE.tazpkg
		status
		gettext "Restoring original package tree... "
		unlzma -c fs.cpio.lzma | cpio -idm --quiet
		status
		rm fs.cpio.lzma && cd ..
		separator
		eval_gettext "Package \$PACKAGE compressed successfully."; newline
		echo $(gettext "Size") : $(du -sh $PACKAGE.tazpkg)
		newline
	fi
}

case $1 in
	pack|-p)
		pack $2 ;;
	extract|-e)
		extract_package $2 $3 ;;
	recompress|-r)
		recompress $2 ;;
	*)
		usage ;;
esac
